type Query {
  kanbans(query: String): [Kanban!]
  lists(query: String!): [List!]
  # cards(query: String!): Kanban!
}

type Mutation {
  createKanban(data: CreateKanbanInput!): Kanban!
  deleteKanban(id: String!): Kanban!
  updateKanban(id: String!, data: UpdateKanbanInput): Kanban!
  createList(data: CreateListInput!): List!
  deleteList(id: ID!): List!
  updateList(id: ID!, data: UpdateListInput): List!
  createCard(data: CreateCardInput!): Card!
  deleteCard(id: ID!): Card!
  updateCard(id: ID!, data: UpdateCardInput): Card!
}

# type Subscription {
#   card(listId: ID!): CardSubscriptionPayload!
#   list(kanbanId: ID!): ListSubscriptionPayload!
# }

type Kanban {
  _id: ID!
  name: String!
  lists: [List!]
}

type List {
  _id: ID!
  parentId: String!
  name: String!
  cards: [Card!]
}

type Card {
  _id: ID!
  parentId: String!
  body: String!
}

input CreateKanbanInput {
  name: String!
}

input UpdateKanbanInput {
  name: String!
}

input CreateListInput {
  name: String!
  kanbanId: String!
}

input UpdateListInput {
  parentId: String
  name: String
}

input CreateCardInput {
  body: String!
  listId: String!
}

input UpdateCardInput {
  parentId: String
  body: String
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type CardSubscriptionPayload {
  mutation: MutationType!
  data: Card!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  data: List!
}